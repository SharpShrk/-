using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Задача_44.Конфигуратор_пассажирских_поездов
{
    internal class Program
    {
        static void Main(string[] args)
        {
            /*У вас есть программа, которая помогает пользователю составить план поезда.
            Есть 4 основных шага в создании плана:
            -Создать направление - создает направление для поезда(к примеру Бийск - Барнаул)
            -Продать билеты - вы получаете рандомное кол-во пассажиров, которые купили билеты на это направление
            -Сформировать поезд - вы создаете поезд и добавляете ему столько вагонов(вагоны могут быть разные по вместительности), сколько хватит для перевозки всех пассажиров.
            -Отправить поезд - вы отправляете поезд, после чего можете снова создать направление.
            В верхней части программы должна выводиться полная информация о текущем рейсе или его отсутствии.*/

            bool isExit = false;
            bool isShipmentCreate = true;
            string userInput;

            Train train = new Train();
            Route route = new Route("1","2"); //создаю для проверки маршрут
            //route.GetRoute(); //получаю маршрут из метода

            while (isExit == false)
            {
                ShowInfo(isShipmentCreate, route); //вывожу информацию о маршруте

                Console.ReadKey();
            }
            
            /*Console.WriteLine("Перед вами меню программы управления поездами:\n");
            train.CreateTrain(GetQuantityPassengers());
            int seats = GetQuantityPassengers();
            Console.WriteLine($"Количество пассажиров - {seats}");
            train.ShowInfo();*/
        }

        static int GetQuantityPassengers()
        {
            int quantity;
            int minQuantity = 250;
            int maxQuantity = 1000;

            Random random = new Random();
            quantity = random.Next(minQuantity, maxQuantity);

            return quantity;
        }

        static void ShowInfo(bool isShipmentCreate, Route route)
        {
            if (isShipmentCreate)
            {
                route.ShowInfo(route);
            }
            else
            {
                Console.WriteLine("Отправление не создано.\n");
            }
        }
    }

    class Train
    {
        private int _seats;
        private List<TrainCar> _trainCars = new List<TrainCar>();

        public void CreateTrain(int passengers)
        {
            bool isFullTrain = false;

            while (isFullTrain == false)
            {
                TrainCar tempTrainCar;
                _trainCars.Add(new TrainCar());

                tempTrainCar = _trainCars[_trainCars.Count - 1];
                _seats = tempTrainCar.GetSeats();

                passengers -= _seats;

                if (passengers <= 0)
                {
                    isFullTrain = true;
                }
            }
        }

        public void ShowInfo()
        {
            for (int i = 0; i < _trainCars.Count; i++)
            {
                Console.Write($"Вагон №{i+1}. ");
                _trainCars[i].ShowInfo();
            }
        }
    }

    class TrainCar
    {
        static Random random = new Random();
        private int _seats;        
        private int _minSeats = 25;
        private int _maxSeats = 60;
        
        public TrainCar()
        {            
            _seats = random.Next(_minSeats, _maxSeats);
        }

        public int GetSeats()
        {
            return _seats;
        }

        public void ShowInfo()
        {
            Console.WriteLine($"Всего мест в вагоне {_seats}.");
        }
    }

    class Route
    {
        public string Route1 { get; private set; }
        public string Route2 { get; private set; }
        private List<Route> _routes = new List<Route>();

        public Route (string route1, string route2)
        {
            Route1 = route1;
            Route2 = route2;
            //_routes.Add(new Route (Route1, Route2));
            _routes.Add(new Route("Москва", "Адлер"));
            _routes.Add(new Route("Ярославль", "Брянск"));
            _routes.Add(new Route("Смоленск", "Воронеж"));
            _routes.Add(new Route("Рязань", "Казань"));
            _routes.Add(new Route("Нижний Новгород", "Сочи"));
            _routes.Add(new Route("Екатеринбург", "Санкт-Петербург"));
            _routes.Add(new Route("Владимир", "Иркутск"));
            _routes.Add(new Route("Владивосток", "Архангельск"));
            _routes.Add(new Route("Красноярск", "Волгоград"));
            _routes.Add(new Route("Йошкар-Ола", "Ростов-на-Дону"));
        }

        public Route GetRoute()
        {
            Route tempRoute = null;
            Random random = new Random();
            int randomRoute = random.Next(0, _routes.Count());

            for (int i = 0; i < _routes.Count; i++)
            {
                if (i == randomRoute)
                {
                    tempRoute = _routes[i];
                    return tempRoute;
                }
            }

            return tempRoute;
        }

        public void ShowInfo(Route route)
        {
            Console.WriteLine($"Создано направление: {route.Route1} - {route.Route2}");
        }
    }
}
