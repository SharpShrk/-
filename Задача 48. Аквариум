using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Задача_48.Аквариум
{
    internal class Program
    {
        static void Main(string[] args)
        {
            /*Есть аквариум, в котором плавают рыбы. В этом аквариуме может быть максимум определенное кол-во рыб. 
            Рыб можно добавить в аквариум или рыб можно достать из аквариума. (программу делать в цикле для того, чтобы рыбы могли “жить”)
            Все рыбы отображаются списком, у рыб также есть возраст. 
            За 1 итерацию рыбы стареют на определенное кол-во жизней и могут умереть. 
            Рыб также вывести в консоль, чтобы можно было мониторить показатели.*/

            bool isExit = false;
            char userInput;
            Aquarium aquarium = new Aquarium();

            while (isExit == false)
            {
                ShowInfo(aquarium);
                aquarium.GrowOld();
                aquarium.RemoveDeadFishes();

                userInput = Console.ReadKey().KeyChar;

                if (userInput == '1')
                {
                    aquarium.AddFish();
                }
                else if (userInput == '2')
                {
                    aquarium.RemoveFish();
                }
                else if (userInput == '3')
                {
                    isExit = true;
                }

                Console.Clear();
            }

        }

        static void ShowInfo(Aquarium aquarium)
        {
            Console.WriteLine($"Аквариум вмещает {aquarium.MaxCapacity} рыб. В аквариуме сейчас {aquarium.CountFish} рыб.");
            Console.WriteLine("В аквариуме сейчас плавают:\n");

            aquarium.ShowFishInside();

            Console.WriteLine("\n1. Добавить рыбу в аквариум;");
            Console.WriteLine("2. Извлечь рыбу из аквариума;");
            Console.WriteLine("3. Выйти из программы;");
            Console.WriteLine("Нажмите любую кнопку, чтобы подождать до завтра.\n");
            Console.Write("Выберите пункт меню: ");
        }
    }

    enum KindFish
    {
        Carp = 1,
        Ide,
        Mackerel,
        Piranha,
        Sterlet,
        Seabass
    }

    class Aquarium
    {
        private static Random _random = new Random();
        private int _startCapacity = 6;
        private List<Fish> _fishes;
        public int MaxCapacity { get; private set; }
        public int CountFish => _fishes.Count;

        public Aquarium()
        {
            _fishes = new List<Fish>();
            MaxCapacity = 10;
            CreateRandomFishes();
        }

        public void ShowFishInside()
        {
            for (int i = 0; i < _fishes.Count; i++)
            {
                Console.Write($"{i+1}.");
                _fishes[i].ShowFishInfo();
            }
        }

        public void RemoveFish()
        {
            string userInput;
            int number;

            Console.WriteLine("\nСейчас в аквариуме плавают:\n");

            for (int i = 0; i < _fishes.Count; i++)
            {
                Console.WriteLine($"{i + 1}. {_fishes[i].Kind}");
            }

            Console.WriteLine("\nКакую рыбу вы хотите убрать из аквариума?\n");
            userInput = Console.ReadLine();

            bool success = int.TryParse(userInput, out number);

            if (success && number <= _fishes.Count && number > 0)
            {
                _fishes.RemoveAt(number - 1);
            }
            else
            {
                Console.WriteLine("Рыбы с таким индексом в аквариуме нет.");
            }
            
        }

        public void AddFish()
        {
            int count = 1;
            string userInput;
            int number;

            Console.WriteLine("\nСписок рыб, которые можно подсадить в аквариум:\n");

            foreach (string fish in Enum.GetNames(typeof(KindFish)))
            {
                Console.WriteLine($"{count}. {fish}");
                count++;
            }

            Console.Write("\nВведите индекс рыбы, которую вы хотите добавить в аквариум: ");
            userInput = Console.ReadLine();

            bool success = int.TryParse(userInput, out number);

            if (success && number <= Enum.GetNames(typeof(KindFish)).Length && number > 0)
            {
                _fishes.Add(new Fish(Enum.GetName(typeof(KindFish), number).ToString()));
            }
            else
            {
                Console.WriteLine("Рыбы с таким индексом в списке нет.");
            }
        }

        public void GrowOld()
        {           
            for (int i = 0; i < _fishes.Count; i++)
            {
                _fishes[i].GrowOld();                
            }
        }

        public bool IsFullCapacity()
        {
            return _fishes.Count == MaxCapacity;
        }

        public void RemoveDeadFishes()
        {
            bool isAlive;

            for (int i = 0; i < _fishes.Count; i++)
            {
                isAlive = _fishes[i].IsAlive();

                if (isAlive == false)
                {
                    _fishes.Remove(_fishes[i]);
                }
            }
            
        }

        private void CreateRandomFishes()
        {
            for (int i = 0; i < _startCapacity; i++)
            {
                _fishes.Add(new Fish(GetRandomKind()));
            }
        }

        private string GetRandomKind()
        {
            return ((KindFish)_random.Next(1, Enum.GetValues(typeof(KindFish)).Length)).ToString();
        }
    }

    class Fish
    {
        private static Random _random = new Random();
        private readonly int _agingRate;
        private readonly int _maxAge;

        public int Age { get; private set; }
        public string Kind { get; private set; }

        public Fish(string kind)
        {
            Age = 0;
            Kind = kind;
            _maxAge = _random.Next(8, 20);
            _agingRate = _random.Next(1, 4);
        }

        public bool IsAlive()
        {
            return Age < _maxAge;
        }

        public void ShowFishInfo()
        {
            Console.Write($"{Kind}. Возвраст {Age}. Продолжительность жизни: {_maxAge}. Скорость старения: {_agingRate}.\n");
        }

        public void GrowOld()
        {
            Age += _agingRate;
        }
    }
}
