using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;

namespace Задача_28.Кадровый_учет
{
    internal class Program
    {
        static void Main(string[] args)
        {
            /*Будет 2 массива: 1) фио 2) должность.
            Описать функцию заполнения массивов досье, функцию форматированного вывода, функцию поиска по фамилии и функцию удаления досье.
            Функция расширяет уже имеющийся массив на 1 и дописывает туда новое значение.
            Программа должна быть с меню, которое содержит пункты:
            1) добавить досье
            2) вывести все досье (в одну строку через “-” фио и должность с порядковым номером в начале)
            3) удалить досье (Массивы уменьшаются на один элемент. Нужны дополнительные проверки, чтобы не возникало ошибок)
            4) поиск по фамилии
            5) выход*/

            string[] surname = new string[0];
            string[] position = new string[0];
            bool isExit = false;
            string userInput;            

            while (isExit == false)
            {                
                Console.WriteLine("\nМеню программы кадрового учета:");
                Console.WriteLine("1 - Добавить досье.");
                Console.WriteLine("2 - Вывести все досье.");
                Console.WriteLine($"3 - Удалить последнее досье. (Сейчас в списке {surname.Length} досье.)");
                Console.WriteLine("4 - Поиск по фамилии.");
                Console.WriteLine("5 - Выход из программы.");
                Console.WriteLine("\nВыберите пункт меню: ");
                userInput = Console.ReadLine();                

                switch (userInput)
                {
                    case "1":
                        AddDossier(ref surname, ref position);                        
                        break;
                    case "2":
                        WriteAllDossiers(surname, position);
                        break;
                    case "3":
                        DeleteLastDossier(ref surname, ref position);
                        break;
                    case "4":
                        SearchBySurname(ref surname, ref position);
                        break;
                    case "5":
                        Console.Write("\nВы уверены, что хотите выйти? Нажмите 'y' если да, любую другую клавишу если нет: ");
                        userInput = Console.ReadLine();

                        if (userInput == "y")
                        {
                            isExit = true;
                            break;
                        }
                        else
                        {
                            break;
                        }
                        
                    default:
                        string error = "Ошибка ввода!";
                        WriteError(error);
                        break;

                }
            }            
        }

        static void AddDossier(ref string[] surname, ref string[] position)
        {
            string addInput;
            string[] tempSurname = new string[surname.Length+1];
            string[] tempPosition = new string[position.Length+1];

            for (int i = 0; i < surname.Length; i++)
            {
                tempSurname[i] = surname[i];
                tempPosition[i] = position[i];
            }

            Console.WriteLine("\nДобавление нового досье.");
            Console.Write("\nВведите фамилию: ");
            addInput = Console.ReadLine();
            tempSurname[tempSurname.Length-1] = addInput; 

            Console.Write("\nВведите должность: ");
            addInput = Console.ReadLine();
            tempPosition[tempPosition.Length-1] = addInput;

            surname = tempSurname;
            position = tempPosition;

            Console.WriteLine("\nНовое досье добавлено");
            Thread.Sleep(1000);
            Console.Clear();
        }

        static void WriteAllDossiers(string[] surname, string[] position)
        {
            Console.WriteLine("Вывод всех досье:");
            
            for (int i = 0; i < surname.Length; i++)
            {
                Console.WriteLine($"{i+1}. {surname[i]} - {position[i]};");
            }

            WaitKey();                        
        }

        static void DeleteLastDossier(ref string[] surname, ref string[] position)
        {
            string[] tempSurname = new string[surname.Length - 1];
            string[] tempPosition = new string[position.Length - 1];

            for (int i = 0; i < tempSurname.Length; i++)
            {
                tempSurname[i] = surname[i];
                tempPosition[i] = position[i];
            }

            if (surname.Length == 0)
            {
                string error = "Удаление невозможно. Список досье пуст!";
                WriteError(error);
            }
            else
            {
                surname = tempSurname;
                position = tempPosition;
                Console.WriteLine("\nПоследнее досье удалено:");
                WaitKey();
            }           
        }

        static void SearchBySurname (ref string[] surname, ref string[] position)
        {
            string userInput;
            bool isFound = false;

            Console.Write("\nПоиск по базе данных.\nВведите фамилию: ");
            userInput = Console.ReadLine();

            for (int i = 0; i < surname.Length; i++)
            {

                if (surname[i] == userInput)
                {
                    Console.WriteLine($"\nНайдено досье по запросу - {userInput}:");
                    Console.WriteLine($"{i+1}. {surname[i]} - {position[i]}");
                    isFound = true;
                    WaitKey();
                }
                else if (i == surname.Length - 1 && isFound == false)
                {
                    string error = "Совпадение по базе данных не найдено!";
                    WriteError(error);
                    WaitKey();
                }
            }

        }

        static void WaitKey()
        {
            ConsoleColor defaultColor = Console.ForegroundColor;
            Console.ForegroundColor = ConsoleColor.Yellow;
            Console.WriteLine("\n\nДля продолжения нажмите любую клавишу...");
            Console.ForegroundColor = defaultColor;
            Console.ReadKey();
            Console.Clear();
        }

        static void WriteError(string error)
        {
            ConsoleColor defaultColor = Console.ForegroundColor;
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("\n" + error);
            Console.ForegroundColor = defaultColor;
        }
    }
}
