using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;

namespace Задача_31.Brave_new_world
{
    internal class Program
    {
        static void Main(string[] args)
        {
            /*Сделать игровую карту с помощью двумерного массива. Сделать функцию рисования карты. 
             * Помимо этого, дать пользователю возможность перемещаться по карте и взаимодействовать с элементами 
             * (например пользователь не может пройти сквозь стену)
             * Все элементы являются обычными символами*/

            string levelName1 = "startLevel";
            string levelName2 = "finishLevel";

            Console.CursorVisible = false;

            PlayStartLevel(levelName1);
            PlayStartLevel(levelName2);

        }

        static void PlayStartLevel(string levelName)
        {
            bool isLevelFinished = false;
            bool isOpenPortal = false;
            bool isArthurSwordFound = false;
            bool isHolyGrailFound = false;
            int heroPositonX;
            int heroPositonY;
            int heroDirectionX = 0;
            int heroDirectionY = 0;
            char portalKey = '$';
            char holyGrail = 'G';
            char kingArthurSword = 'S';

            char[,] map = ReadMap(levelName, out heroPositonX, out heroPositonY);
            DrawMap(map);            

            while (isLevelFinished == false)
            {

                if (map[heroPositonX, heroPositonY] == holyGrail)
                {
                    isHolyGrailFound = true;
                }
                else if (map[heroPositonX, heroPositonY] == kingArthurSword)
                {
                    isArthurSwordFound = true;
                }

                if (levelName == "startLevel")
                {
                    WriteMessage(isOpenPortal, heroPositonX, heroPositonY);
                }
                else
                {
                    WriteMessage(isArthurSwordFound, isHolyGrailFound, heroPositonX, heroPositonY);
                }
                

                if (map[heroPositonX, heroPositonY] == portalKey)
                {
                    isOpenPortal = true;
                }                

                if (Console.KeyAvailable)
                {
                    ConsoleKeyInfo key = Console.ReadKey(true);

                    ChangeDirection(key, ref heroDirectionX, ref heroDirectionY);

                    if (map[heroPositonX + heroDirectionX, heroPositonY + heroDirectionY] != '#')
                    {
                        Move(ref heroPositonX, ref heroPositonY, heroDirectionX, heroDirectionY);
                    }
                }                

                if (map[heroPositonX, heroPositonY] == 'O' && isOpenPortal == true)
                {
                    isOpenPortal = false;
                    isLevelFinished = true;

                    Console.Clear();
                    Console.SetCursorPosition(0, 1);
                    Console.WriteLine("Вы проходите на следующий уровень!\nДля перехода на новый уровень нажмите любую клавишу.");
                    Console.ReadKey();
                    Console.Clear();
                }

                if (map[heroPositonX, heroPositonY] == 'O' && isHolyGrailFound == true && isArthurSwordFound == true)
                {
                    isLevelFinished = true;
                    Console.Clear();
                    Console.SetCursorPosition(0, 1);
                    Console.WriteLine("Вы прошли игру!\nДля выхода из игры нажмите любую клавишу.");
                    Console.ReadKey();
                    Console.Clear();
                }
            }
        }

        static void Move (ref int heroPositonX, ref int heroPositonY, int heroDirectionX, int heroDirectionY)
        {
            Console.SetCursorPosition(heroPositonY, heroPositonX);
            Console.Write(' ');

            heroPositonX += heroDirectionX;
            heroPositonY += heroDirectionY;

            Console.SetCursorPosition(heroPositonY, heroPositonX);
            Console.Write('*');
        }

        static void WriteMessage(bool isHolyGrailFound, bool isArthurSwordFound, int heroPositonX, int heroPositonY)
        {
            Console.SetCursorPosition(0, 15);
            Console.WriteLine("Для прохождения уровня нужно найти меч Короля Артура А и Святой Грааль G");

            if (isHolyGrailFound == true && isArthurSwordFound == false)
            {
                Console.WriteLine("Вы подобрали Святой Грааль.\nМеч Короля Артура не найден.\nПроход закрыт");
            }
            else if (isHolyGrailFound == false && isArthurSwordFound == true)
            {
                Console.WriteLine("Святой Грааль не найден.\nВы подобрали Меч Короля Артура.\nПроход закрыт");
            }
            else if (isHolyGrailFound == true && isArthurSwordFound == true)
            {
                Console.WriteLine("Вы подобрали Святой Грааль.\nВы подобрали Меч Короля Артура.\nПроход открыт. Поспешите к порталу");
            }
            else
            {
                Console.WriteLine("Святой Грааль не найден.\nМеч Короля Артура не найден.\nПроход закрыт");
            }

            Console.SetCursorPosition(heroPositonY, heroPositonX);
        }

        static void WriteMessage(bool isOpenPortal, int heroPositonX, int heroPositonY)
        {
            Console.SetCursorPosition(0, 15);
            Console.WriteLine("Для прохода через портал, нужно найти портальный ключ $");

            if (isOpenPortal == true)
            {
                Console.WriteLine("Портал открылся");
            }
            else
            {
                Console.WriteLine("Портал закрыт");
            }

            Console.SetCursorPosition(heroPositonY, heroPositonX);
        }

        static void ChangeDirection (ConsoleKeyInfo key, ref int directionX, ref int directionY)
        {
            switch (key.Key)
            {
                case ConsoleKey.UpArrow:
                    directionX = -1; 
                    directionY = 0;
                    break;
                case ConsoleKey.DownArrow:
                    directionX = 1; 
                    directionY = 0;
                    break;
                case ConsoleKey.LeftArrow:
                    directionX = 0; 
                    directionY = -1;
                    break;
                case ConsoleKey.RightArrow:
                    directionX = 0; 
                    directionY = 1;
                    break;
            }
        }

        static char[,] ReadMap(string mapName, out int heroPositonX, out int heroPositonY)
        {
            heroPositonX = 0;
            heroPositonY = 0;
            string[] newMap = File.ReadAllLines($"maps/{mapName}.txt");
            char[,] map = new char[newMap.Length, newMap[0].Length];

            for (int i = 0; i < map.GetLength(0); i++)
            {
                for (int j = 0; j < map.GetLength(1); j++)
                {
                    map[i, j] = newMap[i][j];

                    if (map[i, j] == '*')
                    {
                        heroPositonX = i;
                        heroPositonY = j;
                    }
                }                
            }

            return map;
        }

        static void DrawMap (char[,] map)
        {
            for (int i = 0; i < map.GetLength(0); i++)
            {
                for (int j = 0; j < map.GetLength(1); j++)
                {
                    Console.Write(map[i, j]);
                }

                Console.WriteLine("");
            }
        }
    }
}
