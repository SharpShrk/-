using System;
using System.Collections.Generic;

namespace Задача_46.Супермаркет
{
    internal class Program
    {
        static void Main(string[] args)
        {
            /*Написать программу администрирования супермаркетом.
            В супермаркете есть очередь клиентов.
            У каждого клиента в корзине есть товары, также у клиентов есть деньги.
            Клиент, когда подходит на кассу, получает итоговую сумму покупки и старается её оплатить.
            Если оплатить клиент не может, то он рандомный товар из корзины выкидывает до тех пор, пока его денег не хватит для оплаты.
            Клиентов можно делать ограниченное число на старте программы*/

            string userInput;
            int numberBuyers;

            Console.WriteLine("Добро пожаловать в продуктовую лавку. Сколько клиентов в очереди?");
            userInput = Console.ReadLine();
            bool isConverted = int.TryParse(userInput, out numberBuyers);

            if (isConverted)
            {
                Supermarket Supermarket = new Supermarket(numberBuyers);
                Supermarket.ShowBuyers();
                Console.WriteLine();

                Supermarket.ServeBuyer();
            }
            else
            {
                Console.WriteLine("Ошибка ввода!");
            }
        }
    }

    class Buyer
    {
        private static Random _random = new Random();
        private CartProducts _cartProducts = new CartProducts();
        private int _minMoney = 200;
        private int _maxMoney = 2000;
        public int TotalPrice { get; private set; }
        public int Money { get; private set; }        

        public Buyer()
        {
            Money = _random.Next(_minMoney, _maxMoney);
            TotalPrice = _cartProducts.TotalPrice;
        }

        public void ShowInfo()
        {
            Console.WriteLine($"Денег в кошельке - {Money}. Товаров в корзине {_cartProducts.Count}");
        }

        public void RemoveProducts()
        {
            int counter = 0;

            while (Money < TotalPrice)
            {
                int priceRemovedProduct = 0;

                Console.WriteLine("\nДенег не хватает. Нажмите любую клавишу, чтобы удалить случайный товар из корзины...");
                Console.ReadKey();
                _cartProducts.Remove(ref priceRemovedProduct);
                TotalPrice -= priceRemovedProduct;
                counter++;
                Console.WriteLine("\nТовары в корзине после удаления лишних:\n");
                ShowCart();
            }

            Console.WriteLine("\nУдалено товаров - " + counter);
        }

        public void ShowCart()
        {
            _cartProducts.ShowInfo();
        }
    }

    class Supermarket
    {
        private int _money = 0;
        private List<Buyer> _buyers = new List<Buyer>();

        public Supermarket(int numberBuyers)
        {
            for (int i = 0; i < numberBuyers; i++)
            {
                _buyers.Add(new Buyer());
            }
        }

        public void ShowBuyers()
        {
            for (int i = 0; i < _buyers.Count; i++)
            {
                Console.Write($"Клиент №{i + 1}. ");
                _buyers[i].ShowInfo();
            }
        }

        public void ServeBuyer()
        {
            for (int i = 0; i < _buyers.Count; i++)
            {
                Console.WriteLine($"В корзине у покупателя товаров на сумму {_buyers[i].TotalPrice} рублей.\nДенег в кошельке: {_buyers[i].Money} рублей.\nТоваров в корзине:\n");
                _buyers[i].ShowCart();

                if (_buyers[i].Money < _buyers[i].TotalPrice)
                {
                    _buyers[i].RemoveProducts();
                    _money += _buyers[i].TotalPrice;
                    Console.WriteLine($"\nКлиент №{i + 1} расплатился за товар. Клиент заплатил: {_buyers[i].TotalPrice}");
                }
                else
                {
                    _money += _buyers[i].TotalPrice;
                    Console.WriteLine($"\nКлиент №{i + 1} расплатился за товар. Клиент заплатил: {_buyers[i].TotalPrice}");
                }

                Console.WriteLine($"\nДенег в кассе {_money}. \n\nНажмите любую клавишу, чтобы перейти к следующему клиенту...");
                Console.ReadKey();
                Console.Clear();
            }

            Console.WriteLine("Все клиенты обслужены. Денег в кассе:" + _money);
        }
    }

    class Product
    {
        public string Name { get; private set; }
        public int Price { get; private set; }

        public Product(string name, int price)
        {
            Name = name;
            Price = price;
        }

        public void ShowInfo()
        {
            Console.WriteLine($"{Name} - {Price}");
        }
    }

    class CartProducts
    {
        private static Random _random = new Random();
        private int _numberProducts;
        private List<Product> _products = new List<Product>();
        private Assortment _assortment = new Assortment();
        public int TotalPrice { get; private set; }
        public int Count
        {
            get
            {
                return _products.Count;
            }
            private set { }
        }


        public CartProducts()
        {
            int minNumberProduct = 5;

            _numberProducts = _random.Next(minNumberProduct, _assortment.NumberProducts);
            TotalPrice = 0;

            for (int i = 0; i <= _numberProducts; i++)
            {
                _products.Add(_assortment.GetProducts());
                TotalPrice += _products[i].Price;
            }
        }

        public void Remove(ref int priceRemovedProduct)
        {
            int numberProduct = _random.Next(0, _products.Count);

            priceRemovedProduct = _products[numberProduct].Price;
            _products.RemoveAt(numberProduct);
        }

        public void ShowInfo()
        {
            for (int i = 0; i < _products.Count; i++)
            {
                _products[i].ShowInfo();
            }
        }
    }

    class Assortment
    {
        private static Random _random = new Random();
        private List<Product> _products = new List<Product>();

        public int NumberProducts { get; private set; }

        public Assortment()
        {
            _products.Add(new Product("Апельсин", 50));
            _products.Add(new Product("Ананас", 250));
            _products.Add(new Product("Дыня", 220));
            _products.Add(new Product("Банан", 75));
            _products.Add(new Product("Яблоко", 25));
            _products.Add(new Product("Груша", 60));
            _products.Add(new Product("Арбуз", 200));
            _products.Add(new Product("Вишня", 180));
            _products.Add(new Product("Клубника", 120));
            _products.Add(new Product("Манго", 110));
            _products.Add(new Product("Лайм", 90));

            NumberProducts = _products.Count;
        }

        public Product GetProducts()
        {
            int numberProduct;

            numberProduct = _random.Next(1, _products.Count);

            return _products[numberProduct];
        }
    }
}
