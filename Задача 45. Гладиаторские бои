using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Задача_45.Гладиаторские_бои
{
    internal class Program
    {
        static void Main(string[] args)
        {
            /*Создать 5 бойцов, пользователь выбирает 2 бойцов и они сражаются друг с другом до смерти. У каждого бойца могут быть свои статы.
            Каждый игрок должен иметь особую способность для атаки, которая свойственна только его классу!
            Если можно выбрать одинаковых бойцов, то это не должна быть одна и та же ссылка на одного бойца, чтобы он не атаковал сам себя.
            Пример, что может быть уникальное у бойцов. Кто-то каждый 3 удар наносит удвоенный урон, 
            другой имеет 30% увернуться от полученного урона, кто-то при получении урона немного себя лечит. 
            Будут новые поля у наследников. У кого-то может быть мана и это только его особенность.*/
            
            bool isDead = false;
            
            Fighter leftFighter = null;
            Fighter rightFighter = null;

            ChoiceFighters(ref leftFighter, ref rightFighter);

            Arena arena = new Arena(leftFighter, rightFighter);
            arena.Fight();            
        }        

        static void ChoiceFighters(ref Fighter leftFighter, ref Fighter rightFighter)
        {
            Fighter fighter = null;

            bool isBattler1Created = false;
            bool isBattler2Created = false;
            bool isBattlersCreated = false;

            while (isBattlersCreated == false)
            {
                Console.WriteLine("Добро пожаловать на арену.\n");

                if (isBattler1Created == false && isBattler2Created == false)
                {
                    Console.WriteLine("Выберите бойца №1\n");
                    ChoiceBattler(ref fighter);
                    leftFighter = fighter;
                    Console.WriteLine("\nБоец №1 выбран.\nНажмите любую клавишу для продолжения...");
                    Console.ReadKey();
                    Console.Clear();
                    isBattler1Created = true;
                }
                else if (isBattler1Created && isBattler2Created)
                {
                    Console.WriteLine("Боец на левых воротах арены:");
                    leftFighter.ShowInfo();
                    Console.WriteLine("Боец на правых воротах арены:");
                    rightFighter.ShowInfo();
                    Console.WriteLine("\nОба бойца выбраны. Приготовьтесь к поединку.\nНажмите любую клавишу для продолжения...");
                    Console.ReadKey();
                    Console.Clear();
                    isBattlersCreated = true;
                }
                else
                {
                    Console.WriteLine("Боец на левых воротах арены:");
                    leftFighter.ShowInfo();
                    Console.WriteLine("Выберите бойца №2\n");
                    ChoiceBattler(ref fighter);
                    rightFighter = fighter;
                    Console.WriteLine("\nБоец №2 выбран.\nНажмите любую клавишу для продолжения...");
                    Console.ReadKey();
                    Console.Clear();
                    isBattler2Created = true;
                }
            }
        }

        static Fighter CreatePaladin()
        {
            int minHealth = 450;
            int maxHealth = 500;
            int health;
            int minArmor = 15;
            int maxArmor = 20;
            int armor;
            int minDamage = 40;
            int maxDamage = 50;
            int damage;

            Random random = new Random();

            health = random.Next(minHealth, maxHealth);
            armor = random.Next(minArmor, maxArmor);
            damage = random.Next(minDamage, maxDamage);

            Fighter paladin = new Paladin(health, damage, armor);
            return paladin;
        }

        static Fighter CreateWarrior()
        {
            int minHealth = 450;
            int maxHealth = 500;
            int health;
            int minArmor = 15;
            int maxArmor = 20;
            int armor;
            int minDamage = 40;
            int maxDamage = 50;
            int damage;

            Random random = new Random();

            health = random.Next(minHealth, maxHealth);
            armor = random.Next(minArmor, maxArmor);
            damage = random.Next(minDamage, maxDamage);

            Fighter warrior = new Warrior(health, damage, armor);
            return warrior;
        }

        static Fighter CreateWizard()
        {
            int minHealth = 450;
            int maxHealth = 500;
            int health;
            int minArmor = 15;
            int maxArmor = 20;
            int armor;
            int minDamage = 40;
            int maxDamage = 50;
            int damage;
            int mana = 200;

            Random random = new Random();

            health = random.Next(minHealth, maxHealth);
            armor = random.Next(minArmor, maxArmor);
            damage = random.Next(minDamage, maxDamage);

            Fighter wizard = new Wizard(health, damage, armor, mana);
            return wizard;
        }

        static Fighter CreateAssassin()
        {
            int minHealth = 450;
            int maxHealth = 500;
            int health;
            int minArmor = 15;
            int maxArmor = 20;
            int armor;
            int minDamage = 40;
            int maxDamage = 50;
            int damage;

            Random random = new Random();

            health = random.Next(minHealth, maxHealth);
            armor = random.Next(minArmor, maxArmor);
            damage = random.Next(minDamage, maxDamage);

            Fighter assassin = new Assassin(health, damage, armor);
            return assassin;
        }

        static Fighter CreateDarkKnight()
        {
            int minHealth = 450;
            int maxHealth = 500;
            int health;
            int minArmor = 15;
            int maxArmor = 20;
            int armor;
            int minDamage = 40;
            int maxDamage = 50;
            int damage;

            Random random = new Random();

            health = random.Next(minHealth, maxHealth);
            armor = random.Next(minArmor, maxArmor);
            damage = random.Next(minDamage, maxDamage);

            Fighter darkKnight = new DarkKnight(health, damage, armor);
            return darkKnight;
        }

        static void ChoiceBattler(ref Fighter fighter)
        {
            string userInput;
            
            Console.WriteLine("1 - Паладин");
            Console.WriteLine("2 - Воин");
            Console.WriteLine("3 - Маг");
            Console.WriteLine("4 - Ассасин");
            Console.WriteLine("5 - Темный рыцарь");
            Console.Write("\nВаш выбор: ");

            userInput = Console.ReadLine();

            switch (userInput)
            {
                case "1":
                    fighter = CreatePaladin();
                    break;
                case "2":
                    fighter = CreateWarrior();
                    break;
                case "3":
                    fighter = CreateWizard();
                    break;
                case "4":
                    fighter = CreateAssassin();
                    break;
                case "5":
                    fighter = CreateDarkKnight();
                    break;
                default:
                    Console.WriteLine("Бойца с таким номером нет");
                    break;
            }
        }
        
    }

    class Arena
    {
        private Fighter _leftFighter;
        private Fighter _rightFighter;

        public Arena(Fighter leftFighter, Fighter rightFighter)
        {
            _leftFighter = leftFighter;
            _rightFighter = rightFighter;
        }
        
        public void Fight()
        {
            bool isDead = false;

            while (isDead == false)
            {                
                _leftFighter.SpecialAttack();                
                _rightFighter.SpecialAttack();
                _leftFighter.TakeDamage(_rightFighter.damage);
                _rightFighter.TakeDamage(_leftFighter.damage);

                if (_leftFighter.health <= 0 || _rightFighter.health <= 0)
                {
                   isDead = true;
                }

                Console.WriteLine("Боец на левых воротах арены:");
                _leftFighter.ShowInfo();
                Console.WriteLine("Боец на правых воротах арены:");
                _rightFighter.ShowInfo();

                Console.WriteLine("Нажмите кнопку для продолжения...");
                Console.ReadKey();
                Console.Clear();
            }

            Console.WriteLine("Поединок окончен!");
        }            
    }

    abstract class Fighter
    {
        protected int Health;
        protected int Damage;
        protected int Armor;

        public int damage
        {
            get { return Damage; }
        }

        public int health
        {
            get { return Health; }
        }

        public Fighter(int health, int damage, int armor)
        {
            Health = health;
            Damage = damage;
            Armor = armor;
        }

        public virtual void TakeDamage(int damage)
        {
            if (Armor < damage)
            {
                Health -= damage - Armor;
            }
        }

        public abstract void SpecialAttack();

        public virtual void ShowInfo()
        {
            Console.WriteLine($"HP: {Health}\nDMG: {Damage}\nARM: {Armor}\n");
        }
    }

    class Paladin : Fighter
    {            
        private int _maxHealth;
        private int _cooldown = 0;
        private int _bonusArmor = 10;
        private int _heal = 50;

        public Paladin (int health, int damage, int armor) : base (health,damage,armor) 
        {            
            _maxHealth = health;
            Armor += _bonusArmor;
        }

        public override void SpecialAttack()
        {
            DivineTouch();
        }

        private void DivineTouch()
        {
            if (Health < _maxHealth && _cooldown == 2)
            {
                Health += _heal;

                if (Health > _maxHealth) 
                {
                    Health = _maxHealth;
                }

                _cooldown = 0;
            }

            Console.WriteLine("Паладин применяет исцеление.");
            _cooldown++;
        }
    }

    class Warrior : Fighter
    {
        private int _bonusHealth = 150;
        private int _damageIncrease = 30;
        private int _armorDecrease = 10;
        private bool _isRageActivated = false;

        public Warrior(int health, int damage, int armor) : base(health, damage, armor)
        {            
            Health += _bonusHealth;
        }

        public override void SpecialAttack()
        {
            Rage();
        }

        private void Rage()
        {   
            if (_isRageActivated == false)
            {
                Console.WriteLine($"Воин активировал Ярость. Броня уменьшилась на {_armorDecrease}, урон увеличился на {_damageIncrease}.");
                Armor -= _armorDecrease;
                Damage += _damageIncrease;
            }

            _isRageActivated = true;
        }
    }

    class Wizard : Fighter
    {
        private int _mana;
        private int _maxMana;
        private int _manacostFireball = 50;
        private int _cooldown = 0;
        private int _staffDamage;
        private int _armorDecrease = 15;
        private int _healthDecrease = 100;
        private int _fireballDamage = 150;

        public Wizard(int health, int damage, int armor, int mana) : base(health, damage, armor)
        {            
            _mana = mana;
            _maxMana = mana;
            _staffDamage = Damage;
            Armor -= _armorDecrease;
            Health -= _healthDecrease;
        }

        public override void SpecialAttack()
        {
            Fireball();
        }

        public override void ShowInfo()
        {
            Console.WriteLine($"HP: {Health}\nDMG: {Damage}\nARM: {Armor}\nMANA: {_mana}\n");
        }

        private void Fireball()
        {
            
            if (_cooldown == 1 && _mana >= _manacostFireball)
            {
                Damage = _fireballDamage;
                _cooldown = 0;
                Console.WriteLine($"Маг атакуует огненным шаром. Урон: {Damage}");
                _mana -= _manacostFireball;
            }
            else
            {
                Damage = _staffDamage;
            }

            _cooldown++;
        }
    }

    class Assassin : Fighter
    {
        private int _armorDecrease = 10;
        private int _healthDecrease = 75;
        private int _pousionDamage = 0;
        private int _pousionDamageIncrease = 10;
        private int _maxPousionDamage = 50;
        private int _knifeDamage;
        private bool _isDodged = false;

        private Random _random = new Random();

        public Assassin(int health, int damage, int armor) : base(health, damage, armor)
        {
            Armor -= _armorDecrease;
            Health -= _healthDecrease;
            _knifeDamage = Damage;
        }

        public override void TakeDamage(int damage)
        {
            Dodge();

            if (_isDodged == false)
            {
                if (Armor < damage)
                {
                    Health -= damage - Armor;
                    Console.WriteLine("Ассасин не смог уклониться от атаки!");
                }               
            }
            else
            {
                Console.WriteLine("Ассасин уклонился от атаки!");
            }
        }

        public override void SpecialAttack()
        {
            AttackPousion();
        }

        public void AttackPousion()
        {
            Damage = _knifeDamage;

            if (_pousionDamage >= _maxPousionDamage)
            {
                _pousionDamage = _maxPousionDamage;
            }
            else
            {
                _pousionDamage += _pousionDamageIncrease;
            }
            
            Damage += _pousionDamage;

            Console.WriteLine("Дополнительный урон от яда: " + _pousionDamage);
        }

        private void Dodge()
        {
            int minDodgeChance = 0;
            int maxDodgeChance = 11;
            int minDodge = 0;
            int maxDodge = 3;
            int dodgeChance;

            dodgeChance = _random.Next(minDodgeChance, maxDodgeChance);

            _isDodged = false;

            if (dodgeChance >= minDodge && dodgeChance <= maxDodge)
            {
                _isDodged = true;
            }
        }
    }

    class DarkKnight : Fighter
    {
        private int _armorIncrease = 10;
        private int _maxHealth;
        private int _healtSteal = 15;

        public DarkKnight(int health, int damage, int armor) : base(health, damage, armor) 
        {
            Armor += _armorIncrease;
            _maxHealth = Health;
            Damage += _healtSteal;
        }

        public override void SpecialAttack()
        {
            Lifesteal();
        }

        private void Lifesteal()
        {
            Health += _healtSteal;

            if (Health >= _maxHealth)
            {
                Health = _maxHealth;
            }
        }
    }
}
