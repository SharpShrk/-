using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Задача_47.Война
{
    internal class Program
    {
        static void Main(string[] args)
        {
            /*Есть 2 взвода. 1 взвод страны один, 2 взвод страны два.
            Каждый взвод внутри имеет солдат.
            Нужно написать программу, которая будет моделировать бой этих взводов.
            Каждый боец - это уникальная единица, он может иметь уникальные способности или же уникальные характеристики, такие как повышенная сила.
            Побеждает та страна, во взводе которой остались выжившие бойцы.
            Не важно, какой будет бой, рукопашный, стрелковый.*/

            
            BattleField battleField = new BattleField();
            List<Soldier> greekArmy = new List<Soldier>();
            List<Soldier> romanArmy = new List<Soldier>();
            
            Squad squad1 = new Squad(greekArmy);
            squad1.GetArmy(ref greekArmy);
            Squad squad2 = new Squad(romanArmy);
            squad2.GetArmy(ref romanArmy);

            battleField.Battle(greekArmy, romanArmy);
        }
    }

    enum TypeSoldier
    {
        swordsman,
        spearman,
        cavalry
    }

    class Squad
    {
        private List<Soldier> _squad = new List<Soldier>();

        public Squad(List<Soldier> squad)
        {
            _squad = squad;
            Recruiting recruiting = new Recruiting(_squad);
            recruiting.CreateArmy();
            recruiting.GetArmy(ref _squad);
        }

        public void GetArmy(ref List<Soldier> army)
        {
            army = _squad;
        }
    }

    class BattleField
    {
        public void Battle(List<Soldier> greekArmy, List<Soldier> romanArmy)
        {
            bool isWin = false;
            bool isEnterPressed = false;
            int numberGreekSoldiers = 0;
            int numberRomanSoldiers = 0;

            while (isWin == false)
            {                                
                greekArmy[0].TakeDamage(romanArmy[0].Damage, romanArmy[0].TypeSoldier);
                romanArmy[0].TakeDamage(greekArmy[0].Damage, greekArmy[0].TypeSoldier);
                Console.WriteLine($"\nГреческий воин получил {romanArmy[0].Damage} урона. Здоровья осталось: {greekArmy[0].Health}");
                Console.WriteLine($"Римский воин получил {greekArmy[0].Damage} урона. Здоровья осталось: {romanArmy[0].Health}\n");

                GetInfo(greekArmy, romanArmy, ref isEnterPressed, ref numberGreekSoldiers, ref numberRomanSoldiers);

                if (greekArmy.Count == 0)
                {
                    isWin = true;
                    Console.WriteLine("\nГреческая армия повержена.");
                }
                else if (romanArmy.Count == 0)
                {
                    isWin = true;
                    Console.WriteLine("\nРимская армия повержена.");
                }
            }         

            Console.WriteLine($"\nГреков убито - {numberGreekSoldiers}. Римлян убито - {numberRomanSoldiers}.");
            Console.WriteLine($"Осталось греков - {greekArmy.Count}. Осталось римлян - {romanArmy.Count}");
        }

        private void GetInfo(List<Soldier> greekArmy, List<Soldier> romanArmy, ref bool isEnterPressed, ref int numberGreekSoldiers, ref int numberRomanSoldiers)
        {            
            if (greekArmy[0].Health <= 0)
            {
                greekArmy.Remove(greekArmy[0]);
                Console.WriteLine("Грек пал смертью война.");
                numberGreekSoldiers++;
                ReadEnter(ref isEnterPressed, greekArmy, romanArmy);
            }
            else if (romanArmy[0].Health <= 0)
            {
                romanArmy.Remove(romanArmy[0]);
                Console.WriteLine("Римлянин пал смертью война.");
                numberRomanSoldiers++;
                ReadEnter(ref isEnterPressed, greekArmy, romanArmy);
            }
        }

        private void ReadEnter(ref bool isEnterPressed, List<Soldier> greekArmy, List<Soldier> romanArmy)
        {
            Console.WriteLine($"Осталось греков - {greekArmy.Count}. Осталось римлян - {romanArmy.Count}");

            if (isEnterPressed == false)
            {
                Console.WriteLine("\nНажмите <Enter> чтобы узнать результат всего боя... ");
                Console.WriteLine("Нажмите люубю клавишу для перехода к следующему поединку. ");

                if (Console.ReadKey().Key == ConsoleKey.Enter)
                {
                    isEnterPressed = true;
                }
            }

            Console.Clear();
        }
    }

    class Recruiting
    {
        private static Random _random = new Random();
        private List<Soldier> _squad = new List<Soldier>();

        public Recruiting(List<Soldier> squad)
        {
            _squad = squad;
        }

        public void CreateArmy()
        {
            int minSoldiers = 10;
            int maxSoldiers = 20;
            int numberSworsmen = _random.Next(minSoldiers, maxSoldiers);
            int numberSpearmen = _random.Next(minSoldiers, maxSoldiers);
            int numberCavalry = _random.Next(minSoldiers, maxSoldiers);

            CreateSwordsman(numberSworsmen);
            CreateSpearman(numberSpearmen);
            CreateCavary(numberCavalry);

            Shuffle(ref _squad);
        }

        public void GetArmy(ref List<Soldier> squad)
        {
            squad = _squad;
        }

        private void Shuffle(ref List<Soldier> squad)
        {
            Random random = new Random();

            for (int i = squad.Count - 1; i >= 1; i--)
            {
                int j = random.Next(i + 1);

                Soldier temp = squad[j];
                squad[j] = squad[i];
                squad[i] = temp;
            }
        }

        private void CreateSwordsman(int numberSoldiers)
        {
            int minHealth = 150;
            int maxHealth = 200;
            int health;
            int minDamage = 20;
            int maxDamage = 25;
            int damage;
            int minArmor = 5;
            int maxArmor = 8;
            int armor;

            for (int i = 0; i <= numberSoldiers; i++)
            {
                health = _random.Next(minHealth, maxHealth);
                armor = _random.Next(minArmor, maxArmor);
                damage = _random.Next(minDamage, maxDamage);

                Soldier soldier = new Swordsman(health,damage,armor);

                _squad.Add(soldier);                
            }
        }

        private void CreateSpearman(int numberSoldiers)
        {
            int minHealth = 150;
            int maxHealth = 200;
            int health;
            int minDamage = 25;
            int maxDamage = 30;
            int damage;
            int minArmor = 8;
            int maxArmor = 12;
            int armor;

            for (int i = 0; i <= numberSoldiers; i++)
            {
                health = _random.Next(minHealth, maxHealth);
                armor = _random.Next(minArmor, maxArmor);
                damage = _random.Next(minDamage, maxDamage);

                Soldier soldier = new Swordsman(health, damage, armor);

                _squad.Add(soldier);
            }
        }

        private void CreateCavary(int numberSoldiers)
        {
            int minHealth = 200;
            int maxHealth = 250;
            int health;
            int minDamage = 20;
            int maxDamage = 30;
            int damage;
            int minArmor = 8;
            int maxArmor = 10;
            int armor;

            for (int i = 0; i <= numberSoldiers; i++)
            {
                health = _random.Next(minHealth, maxHealth);
                armor = _random.Next(minArmor, maxArmor);
                damage = _random.Next(minDamage, maxDamage);

                Soldier soldier = new Swordsman(health, damage, armor);

                _squad.Add(soldier);
            }
        }
    }

    abstract class Soldier
    {
        protected float DamageEncrease = 1.25f;
        protected float DamageDecrease = 0.75f;
        protected int Armor;
        public TypeSoldier TypeSoldier  { get; protected set; }
        public float Damage { get; private set; }
        public float Health { get; protected set; }

        public Soldier (int health, float damage, int armor)
        {
            Health = health;
            Damage = damage;
            Armor = armor;
        }

        public abstract void TakeDamage(float damage, TypeSoldier type);
    }

    class Swordsman : Soldier
    {
        public Swordsman(int health, float damage, int armor) : base(health, damage, armor)
        {
            TypeSoldier = TypeSoldier.swordsman;
        }

        public override void TakeDamage(float damage, TypeSoldier typeEnemy)
        {
            if (damage > Armor)
            {
                if (typeEnemy == TypeSoldier.spearman)
                {
                    Health -= damage * DamageDecrease - Armor;
                }
                else if (typeEnemy == TypeSoldier.swordsman)
                {
                    Health -= damage - Armor;
                }
                else if (typeEnemy == TypeSoldier.cavalry)
                {
                    Health -= damage * DamageEncrease - Armor;
                }
            }            
        }
    }

    class Spearman : Soldier
    {
        public Spearman(int health, float damage, int armor) : base(health, damage, armor)
        {
            TypeSoldier = TypeSoldier.spearman;
        }

        public override void TakeDamage(float damage, TypeSoldier typeEnemy)
        {
            if (damage > Armor)
            {
                if (typeEnemy == TypeSoldier.spearman)
                {                    
                    Health -= damage - Armor;
                }
                else if (typeEnemy == TypeSoldier.swordsman)
                {
                    Health -= damage * DamageEncrease - Armor;
                }
                else if (typeEnemy == TypeSoldier.cavalry)
                {
                    Health -= damage * DamageDecrease - Armor;                    
                }
            }
        }
    }

    class Cavalry : Soldier
    {
        public Cavalry(int health, float damage, int armor) : base(health, damage, armor)
        {
            TypeSoldier = TypeSoldier.cavalry;
        }

        public override void TakeDamage(float damage, TypeSoldier typeEnemy)
        {
            if (damage > Armor)
            {
                if (typeEnemy == TypeSoldier.spearman)
                {
                    Health -= damage * DamageEncrease - Armor;                   
                }
                else if (typeEnemy == TypeSoldier.swordsman)
                {
                    Health -= damage - Armor;
                }
                else if (typeEnemy == TypeSoldier.cavalry)
                {
                    Health -= damage - Armor;                    
                }
            }
        }
    }
}
