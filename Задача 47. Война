using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Задача_47.Война
{
    internal class Program
    {
        static void Main(string[] args)
        {
            /*Есть 2 взвода. 1 взвод страны один, 2 взвод страны два.
            Каждый взвод внутри имеет солдат.
            Нужно написать программу, которая будет моделировать бой этих взводов.
            Каждый боец - это уникальная единица, он может иметь уникальные способности или же уникальные характеристики, такие как повышенная сила.
            Побеждает та страна, во взводе которой остались выжившие бойцы.
            Не важно, какой будет бой, рукопашный, стрелковый.*/

            
            BattleField battleField = new BattleField();                        
                        
            battleField.Battle();
        }
    }

    enum TypeSoldier
    {
        swordsman,
        spearman,
        cavalry
    }

    class Squad
    {
        private List<Soldier> _army = new List<Soldier>();

        public Squad()
        {
            Recruiting recruiting = new Recruiting(_army);
            recruiting.CreateArmy();
            _army = recruiting.GetArmy();
        }

        public Soldier GetSoldier()
        {
            Soldier soldier = null;

            if (_army.Count >= 0)
            {
                soldier = _army[0];
                _army.Remove(soldier);
                return soldier;
            }

            return soldier;
        }

        public int GetCount()
        {
            return _army.Count;
        }
    }

    class BattleField
    {
        private Soldier _greekSoldier = null;
        private Soldier _romanSoldier = null;
        private int _greekCount = 0;
        private int _romanCount = 0;
        private bool _isWin = false;

        public void Battle()
        {
            Squad greekArmy = new Squad();
            Squad romanArmy = new Squad();
            _greekSoldier = greekArmy.GetSoldier();
            _romanSoldier = romanArmy.GetSoldier();
            
            bool isEnterPressed = false;
            bool isRomanDead = false;
            bool isGreekDead = false;            
            int numberGreekSoldiers = 0;
            int numberRomanSoldiers = 0;

            while (_isWin == false)
            {
                _greekCount = greekArmy.GetCount();
                _romanCount = romanArmy.GetCount();

                if (isGreekDead)
                {
                    _greekSoldier = greekArmy.GetSoldier();
                    isGreekDead = false;
                }

                if (isRomanDead)
                {
                    _romanSoldier = romanArmy.GetSoldier();
                    isRomanDead = false;
                }

                _greekSoldier.TakeDamage(_romanSoldier.Damage, _romanSoldier.TypeSoldier);
                _romanSoldier.TakeDamage(_greekSoldier.Damage, _greekSoldier.TypeSoldier);
                Console.WriteLine($"\nГреческий воин получил {_romanSoldier.Damage} урона. Здоровья осталось: {_greekSoldier.Health}");
                Console.WriteLine($"Римский воин получил {_greekSoldier.Damage} урона. Здоровья осталось: {_romanSoldier.Health}\n");

                GetInfo(ref isEnterPressed, ref numberGreekSoldiers, ref numberRomanSoldiers, ref isGreekDead, ref isRomanDead);

                WriteWinner();
            }         

            Console.WriteLine($"\nГреков убито - {numberGreekSoldiers}. Римлян убито - {numberRomanSoldiers}.");
            Console.WriteLine($"Осталось греков - {_greekCount}. Осталось римлян - {_romanCount}");
        }

        private void WriteWinner()
        {
            if (_greekCount == 0 && _greekSoldier.Health <= 0)
            {
                _isWin = true;
                Console.WriteLine("\nГреческая армия повержена.");
            }
            else if (_romanCount == 0 && _romanSoldier.Health <= 0)
            {
                _isWin = true;
                Console.WriteLine("\nРимская армия повержена.");
            }
        }

        private void GetInfo(ref bool isEnterPressed, ref int numberGreekSoldiers, ref int numberRomanSoldiers, ref bool isGreekDead, ref bool isRomanDead)
        {            
            if (_greekSoldier.Health <= 0)
            {
                isGreekDead = true;
                Console.WriteLine("Грек пал смертью война.");
                numberGreekSoldiers++;
                ReadEnter(ref isEnterPressed, _greekSoldier, _romanSoldier);
            }
            else if (_romanSoldier.Health <= 0)
            {
                isRomanDead = true;
                Console.WriteLine("Римлянин пал смертью война.");
                numberRomanSoldiers++;
                ReadEnter(ref isEnterPressed, _greekSoldier, _romanSoldier);
            }
        }

        private void ReadEnter(ref bool isEnterPressed, Soldier greekSoldier, Soldier romanSoldier)
        {
            
            Console.WriteLine($"Осталось греков - {_romanCount}. Осталось римлян - {_greekCount}");

            if (isEnterPressed == false)
            {
                Console.WriteLine("\nНажмите <Enter> чтобы узнать результат всего боя... ");
                Console.WriteLine("Нажмите люубю клавишу для перехода к следующему поединку. ");

                if (Console.ReadKey().Key == ConsoleKey.Enter)
                {
                    isEnterPressed = true;
                }
            }

            Console.Clear();
        }
    }

    class Recruiting
    {
        private static Random _random = new Random();
        private List<Soldier> _squad = new List<Soldier>();

        public Recruiting(List<Soldier> squad)
        {
            _squad = squad;
        }

        public void CreateArmy()
        {
            int minSoldiers = 10;
            int maxSoldiers = 20;
            int numberSworsmen = _random.Next(minSoldiers, maxSoldiers);
            int numberSpearmen = _random.Next(minSoldiers, maxSoldiers);
            int numberCavalry = _random.Next(minSoldiers, maxSoldiers);

            CreateSwordsman(numberSworsmen);
            CreateSpearman(numberSpearmen);
            CreateCavary(numberCavalry);

            Shuffle(ref _squad);
        }

        public List<Soldier> GetArmy()
        {
            return new List<Soldier> (_squad);
        }

        private void Shuffle(ref List<Soldier> squad)
        {
            Random random = new Random();

            for (int i = squad.Count - 1; i >= 1; i--)
            {
                int j = random.Next(i + 1);

                Soldier temp = squad[j];
                squad[j] = squad[i];
                squad[i] = temp;
            }
        }

        private void CreateSwordsman(int numberSoldiers)
        {
            int minHealth = 150;
            int maxHealth = 200;
            int health;
            int minDamage = 20;
            int maxDamage = 25;
            int damage;
            int minArmor = 5;
            int maxArmor = 8;
            int armor;

            for (int i = 0; i <= numberSoldiers; i++)
            {
                health = _random.Next(minHealth, maxHealth);
                armor = _random.Next(minArmor, maxArmor);
                damage = _random.Next(minDamage, maxDamage);

                Soldier soldier = new Swordsman(health,damage,armor);

                _squad.Add(soldier);                
            }
        }

        private void CreateSpearman(int numberSoldiers)
        {
            int minHealth = 150;
            int maxHealth = 200;
            int health;
            int minDamage = 25;
            int maxDamage = 30;
            int damage;
            int minArmor = 8;
            int maxArmor = 12;
            int armor;

            for (int i = 0; i <= numberSoldiers; i++)
            {
                health = _random.Next(minHealth, maxHealth);
                armor = _random.Next(minArmor, maxArmor);
                damage = _random.Next(minDamage, maxDamage);

                Soldier soldier = new Swordsman(health, damage, armor);

                _squad.Add(soldier);
            }
        }

        private void CreateCavary(int numberSoldiers)
        {
            int minHealth = 200;
            int maxHealth = 250;
            int health;
            int minDamage = 20;
            int maxDamage = 30;
            int damage;
            int minArmor = 8;
            int maxArmor = 10;
            int armor;

            for (int i = 0; i <= numberSoldiers; i++)
            {
                health = _random.Next(minHealth, maxHealth);
                armor = _random.Next(minArmor, maxArmor);
                damage = _random.Next(minDamage, maxDamage);

                Soldier soldier = new Swordsman(health, damage, armor);

                _squad.Add(soldier);
            }
        }
    }

    abstract class Soldier
    {
        protected float DamageEncrease = 1.25f;
        protected float DamageDecrease = 0.75f;
        protected int Armor;
        public TypeSoldier TypeSoldier  { get; protected set; }
        public float Damage { get; private set; }
        public float Health { get; protected set; }

        public Soldier (int health, float damage, int armor)
        {
            Health = health;
            Damage = damage;
            Armor = armor;
        }

        public abstract void TakeDamage(float damage, TypeSoldier type);
    }

    class Swordsman : Soldier
    {
        public Swordsman(int health, float damage, int armor) : base(health, damage, armor)
        {
            TypeSoldier = TypeSoldier.swordsman;
        }

        public override void TakeDamage(float damage, TypeSoldier typeEnemy)
        {
            if (damage > Armor)
            {
                if (typeEnemy == TypeSoldier.spearman)
                {
                    Health -= damage * DamageDecrease - Armor;
                }
                else if (typeEnemy == TypeSoldier.swordsman)
                {
                    Health -= damage - Armor;
                }
                else if (typeEnemy == TypeSoldier.cavalry)
                {
                    Health -= damage * DamageEncrease - Armor;
                }
            }            
        }
    }

    class Spearman : Soldier
    {
        public Spearman(int health, float damage, int armor) : base(health, damage, armor)
        {
            TypeSoldier = TypeSoldier.spearman;
        }

        public override void TakeDamage(float damage, TypeSoldier typeEnemy)
        {
            if (damage > Armor)
            {
                if (typeEnemy == TypeSoldier.spearman)
                {                    
                    Health -= damage - Armor;
                }
                else if (typeEnemy == TypeSoldier.swordsman)
                {
                    Health -= damage * DamageEncrease - Armor;
                }
                else if (typeEnemy == TypeSoldier.cavalry)
                {
                    Health -= damage * DamageDecrease - Armor;                    
                }
            }
        }
    }

    class Cavalry : Soldier
    {
        public Cavalry(int health, float damage, int armor) : base(health, damage, armor)
        {
            TypeSoldier = TypeSoldier.cavalry;
        }

        public override void TakeDamage(float damage, TypeSoldier typeEnemy)
        {
            if (damage > Armor)
            {
                if (typeEnemy == TypeSoldier.spearman)
                {
                    Health -= damage * DamageEncrease - Armor;                   
                }
                else if (typeEnemy == TypeSoldier.swordsman)
                {
                    Health -= damage - Armor;
                }
                else if (typeEnemy == TypeSoldier.cavalry)
                {
                    Health -= damage - Armor;                    
                }
            }
        }
    }
}
