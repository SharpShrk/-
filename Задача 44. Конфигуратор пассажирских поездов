using System;
using System.Collections.Generic;
using System.Linq;

namespace Задача_44.Конфигуратор_пассажирских_поездов
{
    internal class Program
    {
        static void Main(string[] args)
        {
            /*У вас есть программа, которая помогает пользователю составить план поезда.
            Есть 4 основных шага в создании плана:
            -Создать направление - создает направление для поезда(к примеру Бийск - Барнаул)
            -Продать билеты - вы получаете рандомное кол-во пассажиров, которые купили билеты на это направление
            -Сформировать поезд - вы создаете поезд и добавляете ему столько вагонов(вагоны могут быть разные по вместительности), сколько хватит для перевозки всех пассажиров.
            -Отправить поезд - вы отправляете поезд, после чего можете снова создать направление.
            В верхней части программы должна выводиться полная информация о текущем рейсе или его отсутствии.*/

            bool isExit = false;
            bool isShipmentCreate = false;
            bool isTicketsSold = false;
            bool isTrainCreate = false;
            string userInput;
            int seatsTrain;

            Train train = new Train();            
            Dispatcher dispatcher = new Dispatcher();

            dispatcher.CreateRoutes();


            while (isExit == false)
            {
                dispatcher.ShowInfo(isShipmentCreate, isTicketsSold, isTrainCreate, train);
                seatsTrain = dispatcher.Seats;

                Console.WriteLine("\nПеред вами меню программы управления поездами:\n");
                Console.WriteLine("1 - Создать маршрут поезда;");
                Console.WriteLine("2 - Продать билеты;");
                Console.WriteLine("3 - Сформировать поезд;");
                Console.WriteLine("4 - Отправить поезд;");
                Console.WriteLine("5 - Выйти из программы\n");
                Console.Write("Выберите пункт меню: ");
                userInput = Console.ReadLine();

                switch (userInput)
                {
                    case "1":
                        dispatcher.GetRoute(ref isShipmentCreate);
                        break;
                    case "2":
                        dispatcher.SellTickets(isShipmentCreate, ref isTicketsSold, isTrainCreate);
                        break;
                    case "3":
                        train.CreateTrain(isShipmentCreate, isTicketsSold, seatsTrain, ref isTrainCreate);
                        break;
                    case "4":
                        dispatcher.SendTrain(ref isShipmentCreate, ref isTicketsSold, ref isTrainCreate);
                        break;
                    case "5":
                        isExit = true;
                        break;
                    default:
                        Console.WriteLine("\nОшибка ввода!");
                        break;
                }

                Console.WriteLine("\nНажмите любую клавишу для продолжения...");
                Console.ReadKey();
                Console.Clear();
            }
        }        

    class Dispatcher
    {                                                          
            private Route _route = null;
            private List<Route> _routes = new List<Route>();
            public int Seats { get; private set; }

            public void CreateRoutes()
            {
                _routes.Add(new Route("Москва", "Адлер"));
                _routes.Add(new Route("Ярославль", "Брянск"));
                _routes.Add(new Route("Смоленск", "Воронеж"));
                _routes.Add(new Route("Рязань", "Казань"));
                _routes.Add(new Route("Нижний Новгород", "Сочи"));
                _routes.Add(new Route("Екатеринбург", "Санкт-Петербург"));
                _routes.Add(new Route("Владимир", "Иркутск"));
                _routes.Add(new Route("Владивосток", "Архангельск"));
                _routes.Add(new Route("Красноярск", "Волгоград"));
                _routes.Add(new Route("Йошкар-Ола", "Ростов-на-Дону"));
            }            

            public void SellTickets(bool isShipmentCreate, ref bool isTicketsSold, bool isTrainCreate)
            {
                if (isShipmentCreate && isTrainCreate)
                {
                    Console.WriteLine("\nСоблюдайте порядок действий. Сначала создать направление, потом продать билеты,");
                    Console.WriteLine("затем сформировать поезд и в конце отправить поезд");
                }
                else
                {
                    if (isTicketsSold == false)
                    {
                        Seats = GetQuantityPassengers();
                        isTicketsSold = true;
                    }
                    else
                    {
                        Console.WriteLine("\nБилеты уже проданы, сформируйте поезд...");
                    }
                }
            }

            public void SendTrain(ref bool isShipmentCreate, ref bool isTicketsSold, ref bool isTrainCreate)
            {
                if (isShipmentCreate == false || isTicketsSold == false || isTrainCreate == false)
                {
                    Console.WriteLine("\nСоблюдайте порядок действий. Сначала создать направление, потом продать билеты,");
                    Console.WriteLine("затем сформировать поезд и в конце отправить поезд");
                }
                else
                {
                    Console.WriteLine("\nПоздравляем! Поезд успешно отправлен!");
                    isShipmentCreate = false;
                    isTicketsSold = false;
                    isTrainCreate = false;
                }
            }

            public void ShowInfo(bool isShipmentCreate, bool isTicketsSold, bool isTrainCreate, Train train)
            {
                if (isShipmentCreate && isTicketsSold == false && isTrainCreate == false)
                {
                    _route.ShowInfo(_route);
                }
                else if (isShipmentCreate && isTicketsSold && isTrainCreate == false)
                {
                    _route.ShowInfo(_route);
                    Console.WriteLine($"Количество пассажиров - {Seats}");
                }
                else if (isShipmentCreate && isTicketsSold && isTrainCreate)
                {
                    _route.ShowInfo(_route);
                    Console.WriteLine($"Количество пассажиров - {Seats}");
                    Console.WriteLine($"Количество вагонов в поезде - {train.GetNumberTrainCar()}");
                }
                else
                {
                    Console.WriteLine("Отправление не создано.\n");
                }
            }

            public void GetRoute(ref bool isShipmentCreate)
            {
                Route tempRoute = null;

                if (isShipmentCreate)
                {
                    Console.WriteLine("\nСоблюдайте порядок действий. Сначала создать направление, потом продать билеты,");
                    Console.WriteLine("затем сформировать поезд и в конце отправить поезд");
                }
                else
                {
                    isShipmentCreate = false;
                    Random random = new Random();
                    int randomRoute = random.Next(0, _routes.Count());

                    for (int i = 0; i < _routes.Count; i++)
                    {
                        if (i == randomRoute)
                        {
                            tempRoute = _routes[i];
                            isShipmentCreate = true;
                            _route = tempRoute;
                        }
                    }
                }
            }

            public int GetQuantityPassengers()
            {
                int quantity;
                int minQuantity = 250;
                int maxQuantity = 1000;

                Random random = new Random();
                quantity = random.Next(minQuantity, maxQuantity);

                return quantity;
            }
        }
    }

    class Train
    {
        private int _seats;
        private List<TrainCar> _trainCars = new List<TrainCar>();

        public void CreateTrain(bool isShipmentCreate, bool isTicketsSold, int passengers, ref bool isTrainCreate)
        {

            bool isFullTrain = false;

            if (isTicketsSold == false || isShipmentCreate == false)
            {
                Console.WriteLine("\nСоблюдайте порядок действий. Сначала создать направление, потом продать билеты,");
                Console.WriteLine("затем сформировать поезд и в конце отправить поезд");
            }
            else
            {
                if (isTrainCreate == false)
                {
                    while (isFullTrain == false)
                    {
                        TrainCar tempTrainCar;
                        _trainCars.Add(new TrainCar());

                        tempTrainCar = _trainCars[_trainCars.Count - 1];
                        _seats = tempTrainCar.Seats;

                        passengers -= _seats;

                        if (passengers <= 0)
                        {
                            isFullTrain = true;
                        }
                    }

                    isTrainCreate = true;
                }
                else
                {
                    Console.WriteLine("\nПоезд уже сформирован...");
                }
            }
        }

        public int GetNumberTrainCar()
        {
            return _trainCars.Count;
        }
    }

    class TrainCar
    {
        private static Random _random = new Random();      
        private int _minSeats = 25;
        private int _maxSeats = 60;
        public int Seats { get; private set; }

        public TrainCar()
        {
            Seats = _random.Next(_minSeats, _maxSeats);
        }

        public void ShowInfo()
        {
            Console.WriteLine($"Всего мест в вагоне {Seats}.");
        }
    }

    class Route
    {
        public string DeparturePoint { get; private set; }
        public string Destination { get; private set; }

        public Route(string departurePoint, string destination)
        {
            DeparturePoint = departurePoint;
            Destination = destination;
        }

        public void ShowInfo(Route route)
        {
            Console.WriteLine($"Создано направление: {route.DeparturePoint} - {route.Destination}");
        }
    }
}
